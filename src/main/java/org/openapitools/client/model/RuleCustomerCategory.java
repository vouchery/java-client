/*
 * Vouchery API Reference
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: hello@vouchery.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * RuleCustomerCategory
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-02-04T15:47:26.674+01:00[Europe/Berlin]")
public class RuleCustomerCategory {
  /**
   * What categories should customer belong/not belong to pass the rule.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    CUSTOMER_CATEGORY("customer_category");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type = TypeEnum.CUSTOMER_CATEGORY;

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private String category;

  /**
   * any_of means that customer should have tags in mentioned category. none_of - customer shouldn&#39;t have tags.
   */
  @JsonAdapter(MatchingTypeEnum.Adapter.class)
  public enum MatchingTypeEnum {
    ANY_OF("any_of"),
    
    NONE_OF("none_of");

    private String value;

    MatchingTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MatchingTypeEnum fromValue(String value) {
      for (MatchingTypeEnum b : MatchingTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MatchingTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MatchingTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MatchingTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MatchingTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_MATCHING_TYPE = "matching_type";
  @SerializedName(SERIALIZED_NAME_MATCHING_TYPE)
  private MatchingTypeEnum matchingType;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<String>();


  public RuleCustomerCategory type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * What categories should customer belong/not belong to pass the rule.
   * @return type
  **/
  @ApiModelProperty(required = true, value = "What categories should customer belong/not belong to pass the rule.")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }


  public RuleCustomerCategory category(String category) {
    
    this.category = category;
    return this;
  }

   /**
   * Name of category, rule will be related to.
   * @return category
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name of category, rule will be related to.")

  public String getCategory() {
    return category;
  }


  public void setCategory(String category) {
    this.category = category;
  }


  public RuleCustomerCategory matchingType(MatchingTypeEnum matchingType) {
    
    this.matchingType = matchingType;
    return this;
  }

   /**
   * any_of means that customer should have tags in mentioned category. none_of - customer shouldn&#39;t have tags.
   * @return matchingType
  **/
  @ApiModelProperty(required = true, value = "any_of means that customer should have tags in mentioned category. none_of - customer shouldn't have tags.")

  public MatchingTypeEnum getMatchingType() {
    return matchingType;
  }


  public void setMatchingType(MatchingTypeEnum matchingType) {
    this.matchingType = matchingType;
  }


  public RuleCustomerCategory tags(List<String> tags) {
    
    this.tags = tags;
    return this;
  }

  public RuleCustomerCategory addTagsItem(String tagsItem) {
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @ApiModelProperty(required = true, value = "")

  public List<String> getTags() {
    return tags;
  }


  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RuleCustomerCategory ruleCustomerCategory = (RuleCustomerCategory) o;
    return Objects.equals(this.type, ruleCustomerCategory.type) &&
        Objects.equals(this.category, ruleCustomerCategory.category) &&
        Objects.equals(this.matchingType, ruleCustomerCategory.matchingType) &&
        Objects.equals(this.tags, ruleCustomerCategory.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, category, matchingType, tags);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RuleCustomerCategory {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    matchingType: ").append(toIndentedString(matchingType)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

