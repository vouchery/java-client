/*
 * Vouchery API Reference
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: hello@vouchery.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.vouchery.sdk;

import io.vouchery.sdk.ApiCallback;
import io.vouchery.sdk.ApiClient;
import io.vouchery.sdk.ApiException;
import io.vouchery.sdk.ApiResponse;
import io.vouchery.sdk.Configuration;
import io.vouchery.sdk.Pair;
import io.vouchery.sdk.ProgressRequestBody;
import io.vouchery.sdk.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Customer;
import java.io.File;
import org.openapitools.client.model.InlineObject;
import org.openapitools.client.model.InlineObject1;
import org.openapitools.client.model.InlineResponse200;
import org.openapitools.client.model.Redemption;
import org.openapitools.client.model.Voucher;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CustomersApi {
    private ApiClient localVarApiClient;

    public CustomersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CustomersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for assignVouchersToCustomer
     * @param identifier Customer identifier (required)
     * @param inlineObject1  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A customer </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assignVouchersToCustomerCall(String identifier, InlineObject1 inlineObject1, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject1;

        // create path and map variables
        String localVarPath = "/customers/{identifier}/vouchers"
            .replaceAll("\\{" + "identifier" + "\\}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assignVouchersToCustomerValidateBeforeCall(String identifier, InlineObject1 inlineObject1, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling assignVouchersToCustomer(Async)");
        }
        

        okhttp3.Call localVarCall = assignVouchersToCustomerCall(identifier, inlineObject1, _callback);
        return localVarCall;

    }

    /**
     * Assign vouchers to a customer
     * 
     * @param identifier Customer identifier (required)
     * @param inlineObject1  (optional)
     * @return Customer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A customer </td><td>  -  </td></tr>
     </table>
     */
    public Customer assignVouchersToCustomer(String identifier, InlineObject1 inlineObject1) throws ApiException {
        ApiResponse<Customer> localVarResp = assignVouchersToCustomerWithHttpInfo(identifier, inlineObject1);
        return localVarResp.getData();
    }

    /**
     * Assign vouchers to a customer
     * 
     * @param identifier Customer identifier (required)
     * @param inlineObject1  (optional)
     * @return ApiResponse&lt;Customer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A customer </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Customer> assignVouchersToCustomerWithHttpInfo(String identifier, InlineObject1 inlineObject1) throws ApiException {
        okhttp3.Call localVarCall = assignVouchersToCustomerValidateBeforeCall(identifier, inlineObject1, null);
        Type localVarReturnType = new TypeToken<Customer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Assign vouchers to a customer (asynchronously)
     * 
     * @param identifier Customer identifier (required)
     * @param inlineObject1  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A customer </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assignVouchersToCustomerAsync(String identifier, InlineObject1 inlineObject1, final ApiCallback<Customer> _callback) throws ApiException {

        okhttp3.Call localVarCall = assignVouchersToCustomerValidateBeforeCall(identifier, inlineObject1, _callback);
        Type localVarReturnType = new TypeToken<Customer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createCustomer
     * @param customer  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create customer and trigger campaign, if any applicable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCustomerCall(Customer customer, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = customer;

        // create path and map variables
        String localVarPath = "/customers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCustomerValidateBeforeCall(Customer customer, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = createCustomerCall(customer, _callback);
        return localVarCall;

    }

    /**
     * Create a customer
     * 
     * @param customer  (optional)
     * @return Customer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create customer and trigger campaign, if any applicable </td><td>  -  </td></tr>
     </table>
     */
    public Customer createCustomer(Customer customer) throws ApiException {
        ApiResponse<Customer> localVarResp = createCustomerWithHttpInfo(customer);
        return localVarResp.getData();
    }

    /**
     * Create a customer
     * 
     * @param customer  (optional)
     * @return ApiResponse&lt;Customer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create customer and trigger campaign, if any applicable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Customer> createCustomerWithHttpInfo(Customer customer) throws ApiException {
        okhttp3.Call localVarCall = createCustomerValidateBeforeCall(customer, null);
        Type localVarReturnType = new TypeToken<Customer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a customer (asynchronously)
     * 
     * @param customer  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create customer and trigger campaign, if any applicable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCustomerAsync(Customer customer, final ApiCallback<Customer> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCustomerValidateBeforeCall(customer, _callback);
        Type localVarReturnType = new TypeToken<Customer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCustomer
     * @param identifier Customer identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Customer was successfully deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCustomerCall(String identifier, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customers/{identifier}"
            .replaceAll("\\{" + "identifier" + "\\}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCustomerValidateBeforeCall(String identifier, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling deleteCustomer(Async)");
        }
        

        okhttp3.Call localVarCall = deleteCustomerCall(identifier, _callback);
        return localVarCall;

    }

    /**
     * Delete a customer
     * 
     * @param identifier Customer identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Customer was successfully deleted </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCustomer(String identifier) throws ApiException {
        deleteCustomerWithHttpInfo(identifier);
    }

    /**
     * Delete a customer
     * 
     * @param identifier Customer identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Customer was successfully deleted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCustomerWithHttpInfo(String identifier) throws ApiException {
        okhttp3.Call localVarCall = deleteCustomerValidateBeforeCall(identifier, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a customer (asynchronously)
     * 
     * @param identifier Customer identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Customer was successfully deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCustomerAsync(String identifier, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCustomerValidateBeforeCall(identifier, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCustomer
     * @param identifier Customer identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A customer </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomerCall(String identifier, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customers/{identifier}"
            .replaceAll("\\{" + "identifier" + "\\}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomerValidateBeforeCall(String identifier, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling getCustomer(Async)");
        }
        

        okhttp3.Call localVarCall = getCustomerCall(identifier, _callback);
        return localVarCall;

    }

    /**
     * Get a customer
     * 
     * @param identifier Customer identifier (required)
     * @return Customer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A customer </td><td>  -  </td></tr>
     </table>
     */
    public Customer getCustomer(String identifier) throws ApiException {
        ApiResponse<Customer> localVarResp = getCustomerWithHttpInfo(identifier);
        return localVarResp.getData();
    }

    /**
     * Get a customer
     * 
     * @param identifier Customer identifier (required)
     * @return ApiResponse&lt;Customer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A customer </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Customer> getCustomerWithHttpInfo(String identifier) throws ApiException {
        okhttp3.Call localVarCall = getCustomerValidateBeforeCall(identifier, null);
        Type localVarReturnType = new TypeToken<Customer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a customer (asynchronously)
     * 
     * @param identifier Customer identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A customer </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomerAsync(String identifier, final ApiCallback<Customer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomerValidateBeforeCall(identifier, _callback);
        Type localVarReturnType = new TypeToken<Customer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCustomerRedemptions
     * @param identifier Customer identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A collection of customer redemptions </td><td>  * Link - Provides urls for traversing paginated responses. See docs.vouchery.io for details. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomerRedemptionsCall(String identifier, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customers/{identifier}/redemptions"
            .replaceAll("\\{" + "identifier" + "\\}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomerRedemptionsValidateBeforeCall(String identifier, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling getCustomerRedemptions(Async)");
        }
        

        okhttp3.Call localVarCall = getCustomerRedemptionsCall(identifier, _callback);
        return localVarCall;

    }

    /**
     * Get redemptions performed by a customer
     * 
     * @param identifier Customer identifier (required)
     * @return List&lt;Redemption&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A collection of customer redemptions </td><td>  * Link - Provides urls for traversing paginated responses. See docs.vouchery.io for details. <br>  </td></tr>
     </table>
     */
    public List<Redemption> getCustomerRedemptions(String identifier) throws ApiException {
        ApiResponse<List<Redemption>> localVarResp = getCustomerRedemptionsWithHttpInfo(identifier);
        return localVarResp.getData();
    }

    /**
     * Get redemptions performed by a customer
     * 
     * @param identifier Customer identifier (required)
     * @return ApiResponse&lt;List&lt;Redemption&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A collection of customer redemptions </td><td>  * Link - Provides urls for traversing paginated responses. See docs.vouchery.io for details. <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<Redemption>> getCustomerRedemptionsWithHttpInfo(String identifier) throws ApiException {
        okhttp3.Call localVarCall = getCustomerRedemptionsValidateBeforeCall(identifier, null);
        Type localVarReturnType = new TypeToken<List<Redemption>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get redemptions performed by a customer (asynchronously)
     * 
     * @param identifier Customer identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A collection of customer redemptions </td><td>  * Link - Provides urls for traversing paginated responses. See docs.vouchery.io for details. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomerRedemptionsAsync(String identifier, final ApiCallback<List<Redemption>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomerRedemptionsValidateBeforeCall(identifier, _callback);
        Type localVarReturnType = new TypeToken<List<Redemption>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCustomerVouchers
     * @param identifier Customer identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A collection of customer vouchers </td><td>  * Link - Provides urls for traversing paginated responses. See docs.vouchery.io for details. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomerVouchersCall(String identifier, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customers/{identifier}/vouchers"
            .replaceAll("\\{" + "identifier" + "\\}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomerVouchersValidateBeforeCall(String identifier, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling getCustomerVouchers(Async)");
        }
        

        okhttp3.Call localVarCall = getCustomerVouchersCall(identifier, _callback);
        return localVarCall;

    }

    /**
     * Get vouchers assigned to a customer
     * 
     * @param identifier Customer identifier (required)
     * @return List&lt;Voucher&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A collection of customer vouchers </td><td>  * Link - Provides urls for traversing paginated responses. See docs.vouchery.io for details. <br>  </td></tr>
     </table>
     */
    public List<Voucher> getCustomerVouchers(String identifier) throws ApiException {
        ApiResponse<List<Voucher>> localVarResp = getCustomerVouchersWithHttpInfo(identifier);
        return localVarResp.getData();
    }

    /**
     * Get vouchers assigned to a customer
     * 
     * @param identifier Customer identifier (required)
     * @return ApiResponse&lt;List&lt;Voucher&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A collection of customer vouchers </td><td>  * Link - Provides urls for traversing paginated responses. See docs.vouchery.io for details. <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<Voucher>> getCustomerVouchersWithHttpInfo(String identifier) throws ApiException {
        okhttp3.Call localVarCall = getCustomerVouchersValidateBeforeCall(identifier, null);
        Type localVarReturnType = new TypeToken<List<Voucher>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get vouchers assigned to a customer (asynchronously)
     * 
     * @param identifier Customer identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A collection of customer vouchers </td><td>  * Link - Provides urls for traversing paginated responses. See docs.vouchery.io for details. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomerVouchersAsync(String identifier, final ApiCallback<List<Voucher>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomerVouchersValidateBeforeCall(identifier, _callback);
        Type localVarReturnType = new TypeToken<List<Voucher>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCustomers
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collection of customers for campaign </td><td>  * Link - Provides urls for traversing paginated responses. See docs.vouchery.io for details. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomersCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomersValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getCustomersCall(_callback);
        return localVarCall;

    }

    /**
     * Get all customers
     * 
     * @return List&lt;Customer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collection of customers for campaign </td><td>  * Link - Provides urls for traversing paginated responses. See docs.vouchery.io for details. <br>  </td></tr>
     </table>
     */
    public List<Customer> getCustomers() throws ApiException {
        ApiResponse<List<Customer>> localVarResp = getCustomersWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get all customers
     * 
     * @return ApiResponse&lt;List&lt;Customer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collection of customers for campaign </td><td>  * Link - Provides urls for traversing paginated responses. See docs.vouchery.io for details. <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<Customer>> getCustomersWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getCustomersValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Customer>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all customers (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collection of customers for campaign </td><td>  * Link - Provides urls for traversing paginated responses. See docs.vouchery.io for details. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomersAsync(final ApiCallback<List<Customer>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomersValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Customer>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for importCustomers
     * @param file  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Import summary </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importCustomersCall(File file, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customers/import";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (file != null) {
            localVarFormParams.put("file", file);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importCustomersValidateBeforeCall(File file, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = importCustomersCall(file, _callback);
        return localVarCall;

    }

    /**
     * Import your own customers
     * 
     * @param file  (optional)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Import summary </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse200 importCustomers(File file) throws ApiException {
        ApiResponse<InlineResponse200> localVarResp = importCustomersWithHttpInfo(file);
        return localVarResp.getData();
    }

    /**
     * Import your own customers
     * 
     * @param file  (optional)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Import summary </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse200> importCustomersWithHttpInfo(File file) throws ApiException {
        okhttp3.Call localVarCall = importCustomersValidateBeforeCall(file, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Import your own customers (asynchronously)
     * 
     * @param file  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Import summary </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importCustomersAsync(File file, final ApiCallback<InlineResponse200> _callback) throws ApiException {

        okhttp3.Call localVarCall = importCustomersValidateBeforeCall(file, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeVouchersFromCustomer
     * @param identifier Customer identifier (required)
     * @param inlineObject  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A customer </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeVouchersFromCustomerCall(String identifier, InlineObject inlineObject, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject;

        // create path and map variables
        String localVarPath = "/customers/{identifier}/vouchers"
            .replaceAll("\\{" + "identifier" + "\\}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeVouchersFromCustomerValidateBeforeCall(String identifier, InlineObject inlineObject, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling removeVouchersFromCustomer(Async)");
        }
        

        okhttp3.Call localVarCall = removeVouchersFromCustomerCall(identifier, inlineObject, _callback);
        return localVarCall;

    }

    /**
     * Remove (unassign) vouchers from a customer
     * 
     * @param identifier Customer identifier (required)
     * @param inlineObject  (optional)
     * @return Customer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A customer </td><td>  -  </td></tr>
     </table>
     */
    public Customer removeVouchersFromCustomer(String identifier, InlineObject inlineObject) throws ApiException {
        ApiResponse<Customer> localVarResp = removeVouchersFromCustomerWithHttpInfo(identifier, inlineObject);
        return localVarResp.getData();
    }

    /**
     * Remove (unassign) vouchers from a customer
     * 
     * @param identifier Customer identifier (required)
     * @param inlineObject  (optional)
     * @return ApiResponse&lt;Customer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A customer </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Customer> removeVouchersFromCustomerWithHttpInfo(String identifier, InlineObject inlineObject) throws ApiException {
        okhttp3.Call localVarCall = removeVouchersFromCustomerValidateBeforeCall(identifier, inlineObject, null);
        Type localVarReturnType = new TypeToken<Customer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove (unassign) vouchers from a customer (asynchronously)
     * 
     * @param identifier Customer identifier (required)
     * @param inlineObject  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A customer </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeVouchersFromCustomerAsync(String identifier, InlineObject inlineObject, final ApiCallback<Customer> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeVouchersFromCustomerValidateBeforeCall(identifier, inlineObject, _callback);
        Type localVarReturnType = new TypeToken<Customer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCustomer
     * @param identifier Customer identifier (required)
     * @param customer  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated customer and trigger campaign, if any applicable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCustomerCall(String identifier, Customer customer, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = customer;

        // create path and map variables
        String localVarPath = "/customers/{identifier}"
            .replaceAll("\\{" + "identifier" + "\\}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCustomerValidateBeforeCall(String identifier, Customer customer, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling updateCustomer(Async)");
        }
        

        okhttp3.Call localVarCall = updateCustomerCall(identifier, customer, _callback);
        return localVarCall;

    }

    /**
     * Update a customer
     * 
     * @param identifier Customer identifier (required)
     * @param customer  (optional)
     * @return Customer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated customer and trigger campaign, if any applicable </td><td>  -  </td></tr>
     </table>
     */
    public Customer updateCustomer(String identifier, Customer customer) throws ApiException {
        ApiResponse<Customer> localVarResp = updateCustomerWithHttpInfo(identifier, customer);
        return localVarResp.getData();
    }

    /**
     * Update a customer
     * 
     * @param identifier Customer identifier (required)
     * @param customer  (optional)
     * @return ApiResponse&lt;Customer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated customer and trigger campaign, if any applicable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Customer> updateCustomerWithHttpInfo(String identifier, Customer customer) throws ApiException {
        okhttp3.Call localVarCall = updateCustomerValidateBeforeCall(identifier, customer, null);
        Type localVarReturnType = new TypeToken<Customer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a customer (asynchronously)
     * 
     * @param identifier Customer identifier (required)
     * @param customer  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated customer and trigger campaign, if any applicable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCustomerAsync(String identifier, Customer customer, final ApiCallback<Customer> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCustomerValidateBeforeCall(identifier, customer, _callback);
        Type localVarReturnType = new TypeToken<Customer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
