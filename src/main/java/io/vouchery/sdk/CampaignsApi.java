/*
 * Vouchery API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: hello@vouchery.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.vouchery.sdk;

import io.vouchery.sdk.ApiCallback;
import io.vouchery.sdk.ApiClient;
import io.vouchery.sdk.ApiException;
import io.vouchery.sdk.ApiResponse;
import io.vouchery.sdk.Configuration;
import io.vouchery.sdk.Pair;
import io.vouchery.sdk.ProgressRequestBody;
import io.vouchery.sdk.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Campaign;
import org.openapitools.client.model.MainCampaign;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CampaignsApi {
    private ApiClient localVarApiClient;

    public CampaignsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CampaignsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createCampaign
     * @param campaign  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The newly created campaign </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCampaignCall(Campaign campaign, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = campaign;

        // create path and map variables
        String localVarPath = "/campaigns";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCampaignValidateBeforeCall(Campaign campaign, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = createCampaignCall(campaign, _callback);
        return localVarCall;

    }

    /**
     * Create a campaign
     * 
     * @param campaign  (optional)
     * @return Campaign
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The newly created campaign </td><td>  -  </td></tr>
     </table>
     */
    public Campaign createCampaign(Campaign campaign) throws ApiException {
        ApiResponse<Campaign> localVarResp = createCampaignWithHttpInfo(campaign);
        return localVarResp.getData();
    }

    /**
     * Create a campaign
     * 
     * @param campaign  (optional)
     * @return ApiResponse&lt;Campaign&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The newly created campaign </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Campaign> createCampaignWithHttpInfo(Campaign campaign) throws ApiException {
        okhttp3.Call localVarCall = createCampaignValidateBeforeCall(campaign, null);
        Type localVarReturnType = new TypeToken<Campaign>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a campaign (asynchronously)
     * 
     * @param campaign  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The newly created campaign </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCampaignAsync(Campaign campaign, final ApiCallback<Campaign> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCampaignValidateBeforeCall(campaign, _callback);
        Type localVarReturnType = new TypeToken<Campaign>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCampaign
     * @param id Campaign ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Campaign was successfully deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCampaignCall(Integer id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/campaigns/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCampaignValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteCampaign(Async)");
        }
        

        okhttp3.Call localVarCall = deleteCampaignCall(id, _callback);
        return localVarCall;

    }

    /**
     * Delete a campaign
     * 
     * @param id Campaign ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Campaign was successfully deleted </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCampaign(Integer id) throws ApiException {
        deleteCampaignWithHttpInfo(id);
    }

    /**
     * Delete a campaign
     * 
     * @param id Campaign ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Campaign was successfully deleted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCampaignWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = deleteCampaignValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a campaign (asynchronously)
     * 
     * @param id Campaign ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Campaign was successfully deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCampaignAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCampaignValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for findSubCampaigns
     * @param nameCont Name contains (optional)
     * @param statusEq Status (optional)
     * @param templateEq Template (type) of sub campaign (optional)
     * @param triggersOnEq Triggers On (optional)
     * @param triggerNameCont Trigger Name contains (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collection of campaigns </td><td>  * Link - Provides urls for traversing paginated responses. See docs.vouchery.io for details. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call findSubCampaignsCall(String nameCont, String statusEq, String templateEq, String triggersOnEq, String triggerNameCont, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/campaigns/sub";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (nameCont != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name_cont", nameCont));
        }

        if (statusEq != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status_eq", statusEq));
        }

        if (templateEq != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("template_eq", templateEq));
        }

        if (triggersOnEq != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("triggers_on_eq", triggersOnEq));
        }

        if (triggerNameCont != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trigger_name_cont", triggerNameCont));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findSubCampaignsValidateBeforeCall(String nameCont, String statusEq, String templateEq, String triggersOnEq, String triggerNameCont, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = findSubCampaignsCall(nameCont, statusEq, templateEq, triggersOnEq, triggerNameCont, _callback);
        return localVarCall;

    }

    /**
     * Get sub campaigns by params
     * 
     * @param nameCont Name contains (optional)
     * @param statusEq Status (optional)
     * @param templateEq Template (type) of sub campaign (optional)
     * @param triggersOnEq Triggers On (optional)
     * @param triggerNameCont Trigger Name contains (optional)
     * @return List&lt;Campaign&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collection of campaigns </td><td>  * Link - Provides urls for traversing paginated responses. See docs.vouchery.io for details. <br>  </td></tr>
     </table>
     */
    public List<Campaign> findSubCampaigns(String nameCont, String statusEq, String templateEq, String triggersOnEq, String triggerNameCont) throws ApiException {
        ApiResponse<List<Campaign>> localVarResp = findSubCampaignsWithHttpInfo(nameCont, statusEq, templateEq, triggersOnEq, triggerNameCont);
        return localVarResp.getData();
    }

    /**
     * Get sub campaigns by params
     * 
     * @param nameCont Name contains (optional)
     * @param statusEq Status (optional)
     * @param templateEq Template (type) of sub campaign (optional)
     * @param triggersOnEq Triggers On (optional)
     * @param triggerNameCont Trigger Name contains (optional)
     * @return ApiResponse&lt;List&lt;Campaign&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collection of campaigns </td><td>  * Link - Provides urls for traversing paginated responses. See docs.vouchery.io for details. <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<Campaign>> findSubCampaignsWithHttpInfo(String nameCont, String statusEq, String templateEq, String triggersOnEq, String triggerNameCont) throws ApiException {
        okhttp3.Call localVarCall = findSubCampaignsValidateBeforeCall(nameCont, statusEq, templateEq, triggersOnEq, triggerNameCont, null);
        Type localVarReturnType = new TypeToken<List<Campaign>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get sub campaigns by params (asynchronously)
     * 
     * @param nameCont Name contains (optional)
     * @param statusEq Status (optional)
     * @param templateEq Template (type) of sub campaign (optional)
     * @param triggersOnEq Triggers On (optional)
     * @param triggerNameCont Trigger Name contains (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collection of campaigns </td><td>  * Link - Provides urls for traversing paginated responses. See docs.vouchery.io for details. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call findSubCampaignsAsync(String nameCont, String statusEq, String templateEq, String triggersOnEq, String triggerNameCont, final ApiCallback<List<Campaign>> _callback) throws ApiException {

        okhttp3.Call localVarCall = findSubCampaignsValidateBeforeCall(nameCont, statusEq, templateEq, triggersOnEq, triggerNameCont, _callback);
        Type localVarReturnType = new TypeToken<List<Campaign>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCampaign
     * @param id Campaign ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A campaign </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignCall(Integer id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/campaigns/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCampaignValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCampaign(Async)");
        }
        

        okhttp3.Call localVarCall = getCampaignCall(id, _callback);
        return localVarCall;

    }

    /**
     * Get a campaign
     * 
     * @param id Campaign ID (required)
     * @return Campaign
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A campaign </td><td>  -  </td></tr>
     </table>
     */
    public Campaign getCampaign(Integer id) throws ApiException {
        ApiResponse<Campaign> localVarResp = getCampaignWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get a campaign
     * 
     * @param id Campaign ID (required)
     * @return ApiResponse&lt;Campaign&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A campaign </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Campaign> getCampaignWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = getCampaignValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Campaign>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a campaign (asynchronously)
     * 
     * @param id Campaign ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A campaign </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignAsync(Integer id, final ApiCallback<Campaign> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCampaignValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Campaign>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCampaigns
     * @param nameCont Name contains (optional)
     * @param teamEq Team (optional)
     * @param statusEq Status (optional)
     * @param templateEq Template (promotion type) of main campaign (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collection of campaigns </td><td>  * Link - Provides urls for traversing paginated responses. See docs.vouchery.io for details. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignsCall(String nameCont, String teamEq, String statusEq, String templateEq, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/campaigns";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (nameCont != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name_cont", nameCont));
        }

        if (teamEq != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team_eq", teamEq));
        }

        if (statusEq != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status_eq", statusEq));
        }

        if (templateEq != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("template_eq", templateEq));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCampaignsValidateBeforeCall(String nameCont, String teamEq, String statusEq, String templateEq, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getCampaignsCall(nameCont, teamEq, statusEq, templateEq, _callback);
        return localVarCall;

    }

    /**
     * Get main campaigns with children by params
     * 
     * @param nameCont Name contains (optional)
     * @param teamEq Team (optional)
     * @param statusEq Status (optional)
     * @param templateEq Template (promotion type) of main campaign (optional)
     * @return List&lt;Campaign&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collection of campaigns </td><td>  * Link - Provides urls for traversing paginated responses. See docs.vouchery.io for details. <br>  </td></tr>
     </table>
     */
    public List<Campaign> getCampaigns(String nameCont, String teamEq, String statusEq, String templateEq) throws ApiException {
        ApiResponse<List<Campaign>> localVarResp = getCampaignsWithHttpInfo(nameCont, teamEq, statusEq, templateEq);
        return localVarResp.getData();
    }

    /**
     * Get main campaigns with children by params
     * 
     * @param nameCont Name contains (optional)
     * @param teamEq Team (optional)
     * @param statusEq Status (optional)
     * @param templateEq Template (promotion type) of main campaign (optional)
     * @return ApiResponse&lt;List&lt;Campaign&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collection of campaigns </td><td>  * Link - Provides urls for traversing paginated responses. See docs.vouchery.io for details. <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<Campaign>> getCampaignsWithHttpInfo(String nameCont, String teamEq, String statusEq, String templateEq) throws ApiException {
        okhttp3.Call localVarCall = getCampaignsValidateBeforeCall(nameCont, teamEq, statusEq, templateEq, null);
        Type localVarReturnType = new TypeToken<List<Campaign>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get main campaigns with children by params (asynchronously)
     * 
     * @param nameCont Name contains (optional)
     * @param teamEq Team (optional)
     * @param statusEq Status (optional)
     * @param templateEq Template (promotion type) of main campaign (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collection of campaigns </td><td>  * Link - Provides urls for traversing paginated responses. See docs.vouchery.io for details. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignsAsync(String nameCont, String teamEq, String statusEq, String templateEq, final ApiCallback<List<Campaign>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCampaignsValidateBeforeCall(nameCont, teamEq, statusEq, templateEq, _callback);
        Type localVarReturnType = new TypeToken<List<Campaign>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMainCampaign
     * @param id Campaign ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A campaign </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMainCampaignCall(Integer id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/main_campaigns/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMainCampaignValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getMainCampaign(Async)");
        }
        

        okhttp3.Call localVarCall = getMainCampaignCall(id, _callback);
        return localVarCall;

    }

    /**
     * Get a main campaign
     * 
     * @param id Campaign ID (required)
     * @return MainCampaign
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A campaign </td><td>  -  </td></tr>
     </table>
     */
    public MainCampaign getMainCampaign(Integer id) throws ApiException {
        ApiResponse<MainCampaign> localVarResp = getMainCampaignWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get a main campaign
     * 
     * @param id Campaign ID (required)
     * @return ApiResponse&lt;MainCampaign&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A campaign </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MainCampaign> getMainCampaignWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = getMainCampaignValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<MainCampaign>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a main campaign (asynchronously)
     * 
     * @param id Campaign ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A campaign </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMainCampaignAsync(Integer id, final ApiCallback<MainCampaign> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMainCampaignValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<MainCampaign>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMainCampaigns
     * @param nameCont Name contains (optional)
     * @param teamEq Team (optional)
     * @param statusEq Status (optional)
     * @param templateEq Template (promotion type) of main campaign (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collection of campaigns </td><td>  * Link - Provides urls for traversing paginated responses. See docs.vouchery.io for details. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getMainCampaignsCall(String nameCont, String teamEq, String statusEq, String templateEq, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/main_campaigns";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (nameCont != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name_cont", nameCont));
        }

        if (teamEq != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team_eq", teamEq));
        }

        if (statusEq != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status_eq", statusEq));
        }

        if (templateEq != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("template_eq", templateEq));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMainCampaignsValidateBeforeCall(String nameCont, String teamEq, String statusEq, String templateEq, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getMainCampaignsCall(nameCont, teamEq, statusEq, templateEq, _callback);
        return localVarCall;

    }

    /**
     * Get main campaigns with children by params
     * 
     * @param nameCont Name contains (optional)
     * @param teamEq Team (optional)
     * @param statusEq Status (optional)
     * @param templateEq Template (promotion type) of main campaign (optional)
     * @return List&lt;MainCampaign&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collection of campaigns </td><td>  * Link - Provides urls for traversing paginated responses. See docs.vouchery.io for details. <br>  </td></tr>
     </table>
     */
    public List<MainCampaign> getMainCampaigns(String nameCont, String teamEq, String statusEq, String templateEq) throws ApiException {
        ApiResponse<List<MainCampaign>> localVarResp = getMainCampaignsWithHttpInfo(nameCont, teamEq, statusEq, templateEq);
        return localVarResp.getData();
    }

    /**
     * Get main campaigns with children by params
     * 
     * @param nameCont Name contains (optional)
     * @param teamEq Team (optional)
     * @param statusEq Status (optional)
     * @param templateEq Template (promotion type) of main campaign (optional)
     * @return ApiResponse&lt;List&lt;MainCampaign&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collection of campaigns </td><td>  * Link - Provides urls for traversing paginated responses. See docs.vouchery.io for details. <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<MainCampaign>> getMainCampaignsWithHttpInfo(String nameCont, String teamEq, String statusEq, String templateEq) throws ApiException {
        okhttp3.Call localVarCall = getMainCampaignsValidateBeforeCall(nameCont, teamEq, statusEq, templateEq, null);
        Type localVarReturnType = new TypeToken<List<MainCampaign>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get main campaigns with children by params (asynchronously)
     * 
     * @param nameCont Name contains (optional)
     * @param teamEq Team (optional)
     * @param statusEq Status (optional)
     * @param templateEq Template (promotion type) of main campaign (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collection of campaigns </td><td>  * Link - Provides urls for traversing paginated responses. See docs.vouchery.io for details. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getMainCampaignsAsync(String nameCont, String teamEq, String statusEq, String templateEq, final ApiCallback<List<MainCampaign>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMainCampaignsValidateBeforeCall(nameCont, teamEq, statusEq, templateEq, _callback);
        Type localVarReturnType = new TypeToken<List<MainCampaign>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCampaign
     * @param id Campaign ID (required)
     * @param campaign  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated campaign </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCampaignCall(Integer id, Campaign campaign, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = campaign;

        // create path and map variables
        String localVarPath = "/campaigns/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCampaignValidateBeforeCall(Integer id, Campaign campaign, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateCampaign(Async)");
        }
        

        okhttp3.Call localVarCall = updateCampaignCall(id, campaign, _callback);
        return localVarCall;

    }

    /**
     * Update a campaign
     * 
     * @param id Campaign ID (required)
     * @param campaign  (optional)
     * @return Campaign
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated campaign </td><td>  -  </td></tr>
     </table>
     */
    public Campaign updateCampaign(Integer id, Campaign campaign) throws ApiException {
        ApiResponse<Campaign> localVarResp = updateCampaignWithHttpInfo(id, campaign);
        return localVarResp.getData();
    }

    /**
     * Update a campaign
     * 
     * @param id Campaign ID (required)
     * @param campaign  (optional)
     * @return ApiResponse&lt;Campaign&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated campaign </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Campaign> updateCampaignWithHttpInfo(Integer id, Campaign campaign) throws ApiException {
        okhttp3.Call localVarCall = updateCampaignValidateBeforeCall(id, campaign, null);
        Type localVarReturnType = new TypeToken<Campaign>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a campaign (asynchronously)
     * 
     * @param id Campaign ID (required)
     * @param campaign  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated campaign </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCampaignAsync(Integer id, Campaign campaign, final ApiCallback<Campaign> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCampaignValidateBeforeCall(id, campaign, _callback);
        Type localVarReturnType = new TypeToken<Campaign>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
