/*
 * Vouchery API Reference
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: hello@vouchery.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.vouchery.sdk;

import io.vouchery.sdk.ApiCallback;
import io.vouchery.sdk.ApiClient;
import io.vouchery.sdk.ApiException;
import io.vouchery.sdk.ApiResponse;
import io.vouchery.sdk.Configuration;
import io.vouchery.sdk.Pair;
import io.vouchery.sdk.ProgressRequestBody;
import io.vouchery.sdk.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Batch;
import java.io.File;
import org.openapitools.client.model.InlineObject4;
import org.openapitools.client.model.InlineResponse200;
import org.openapitools.client.model.Voucher;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VouchersApi {
    private ApiClient localVarApiClient;

    public VouchersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VouchersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for batchGenerateVouchers
     * @param id Campaign ID (required)
     * @param batch  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collection of created vouchers </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchGenerateVouchersCall(Integer id, Batch batch, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = batch;

        // create path and map variables
        String localVarPath = "/campaigns/{id}/vouchers/batch"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call batchGenerateVouchersValidateBeforeCall(Integer id, Batch batch, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling batchGenerateVouchers(Async)");
        }
        

        okhttp3.Call localVarCall = batchGenerateVouchersCall(id, batch, _callback);
        return localVarCall;

    }

    /**
     * Batch create vouchers
     *  &lt;p&gt;Generate a batch of unique vouchers. Each voucher will be created using &lt;code&gt;{prefix}-{random code}&lt;/code&gt; format where code will be a random string of requested type and length. &lt;strong&gt;A prefix needs to be unique within a project.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt; Following code types are supported: &lt;ul&gt; &lt;li&gt;digits&lt;/li&gt; &lt;li&gt;letters&lt;/li&gt; &lt;li&gt;mixed (digits and letters)&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt; &lt;p&gt;Allowed characters for each code type have been filtered to avoid typing mistakes. Maximum number of codes possible to generate in one batch request is 50 000.&lt;/p&gt;
     * @param id Campaign ID (required)
     * @param batch  (optional)
     * @return List&lt;Voucher&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collection of created vouchers </td><td>  -  </td></tr>
     </table>
     */
    public List<Voucher> batchGenerateVouchers(Integer id, Batch batch) throws ApiException {
        ApiResponse<List<Voucher>> localVarResp = batchGenerateVouchersWithHttpInfo(id, batch);
        return localVarResp.getData();
    }

    /**
     * Batch create vouchers
     *  &lt;p&gt;Generate a batch of unique vouchers. Each voucher will be created using &lt;code&gt;{prefix}-{random code}&lt;/code&gt; format where code will be a random string of requested type and length. &lt;strong&gt;A prefix needs to be unique within a project.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt; Following code types are supported: &lt;ul&gt; &lt;li&gt;digits&lt;/li&gt; &lt;li&gt;letters&lt;/li&gt; &lt;li&gt;mixed (digits and letters)&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt; &lt;p&gt;Allowed characters for each code type have been filtered to avoid typing mistakes. Maximum number of codes possible to generate in one batch request is 50 000.&lt;/p&gt;
     * @param id Campaign ID (required)
     * @param batch  (optional)
     * @return ApiResponse&lt;List&lt;Voucher&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collection of created vouchers </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Voucher>> batchGenerateVouchersWithHttpInfo(Integer id, Batch batch) throws ApiException {
        okhttp3.Call localVarCall = batchGenerateVouchersValidateBeforeCall(id, batch, null);
        Type localVarReturnType = new TypeToken<List<Voucher>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Batch create vouchers (asynchronously)
     *  &lt;p&gt;Generate a batch of unique vouchers. Each voucher will be created using &lt;code&gt;{prefix}-{random code}&lt;/code&gt; format where code will be a random string of requested type and length. &lt;strong&gt;A prefix needs to be unique within a project.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt; Following code types are supported: &lt;ul&gt; &lt;li&gt;digits&lt;/li&gt; &lt;li&gt;letters&lt;/li&gt; &lt;li&gt;mixed (digits and letters)&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt; &lt;p&gt;Allowed characters for each code type have been filtered to avoid typing mistakes. Maximum number of codes possible to generate in one batch request is 50 000.&lt;/p&gt;
     * @param id Campaign ID (required)
     * @param batch  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collection of created vouchers </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchGenerateVouchersAsync(Integer id, Batch batch, final ApiCallback<List<Voucher>> _callback) throws ApiException {

        okhttp3.Call localVarCall = batchGenerateVouchersValidateBeforeCall(id, batch, _callback);
        Type localVarReturnType = new TypeToken<List<Voucher>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createVoucher
     * @param campaignId Campaign ID (required)
     * @param voucher  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created voucher </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVoucherCall(Integer campaignId, Voucher voucher, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = voucher;

        // create path and map variables
        String localVarPath = "/campaigns/{campaign_id}/vouchers"
            .replaceAll("\\{" + "campaign_id" + "\\}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createVoucherValidateBeforeCall(Integer campaignId, Voucher voucher, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling createVoucher(Async)");
        }
        

        okhttp3.Call localVarCall = createVoucherCall(campaignId, voucher, _callback);
        return localVarCall;

    }

    /**
     * Create a voucher
     * 
     * @param campaignId Campaign ID (required)
     * @param voucher  (optional)
     * @return Voucher
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created voucher </td><td>  -  </td></tr>
     </table>
     */
    public Voucher createVoucher(Integer campaignId, Voucher voucher) throws ApiException {
        ApiResponse<Voucher> localVarResp = createVoucherWithHttpInfo(campaignId, voucher);
        return localVarResp.getData();
    }

    /**
     * Create a voucher
     * 
     * @param campaignId Campaign ID (required)
     * @param voucher  (optional)
     * @return ApiResponse&lt;Voucher&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created voucher </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Voucher> createVoucherWithHttpInfo(Integer campaignId, Voucher voucher) throws ApiException {
        okhttp3.Call localVarCall = createVoucherValidateBeforeCall(campaignId, voucher, null);
        Type localVarReturnType = new TypeToken<Voucher>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a voucher (asynchronously)
     * 
     * @param campaignId Campaign ID (required)
     * @param voucher  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created voucher </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVoucherAsync(Integer campaignId, Voucher voucher, final ApiCallback<Voucher> _callback) throws ApiException {

        okhttp3.Call localVarCall = createVoucherValidateBeforeCall(campaignId, voucher, _callback);
        Type localVarReturnType = new TypeToken<Voucher>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteVoucher
     * @param code Voucher code (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Voucher was successfully deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVoucherCall(String code, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vouchers/{code}"
            .replaceAll("\\{" + "code" + "\\}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteVoucherValidateBeforeCall(String code, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling deleteVoucher(Async)");
        }
        

        okhttp3.Call localVarCall = deleteVoucherCall(code, _callback);
        return localVarCall;

    }

    /**
     * Delete a voucher
     * Delete a single voucher. Vouchers with at least one confirmed redemption can not be deleted.
     * @param code Voucher code (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Voucher was successfully deleted </td><td>  -  </td></tr>
     </table>
     */
    public void deleteVoucher(String code) throws ApiException {
        deleteVoucherWithHttpInfo(code);
    }

    /**
     * Delete a voucher
     * Delete a single voucher. Vouchers with at least one confirmed redemption can not be deleted.
     * @param code Voucher code (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Voucher was successfully deleted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteVoucherWithHttpInfo(String code) throws ApiException {
        okhttp3.Call localVarCall = deleteVoucherValidateBeforeCall(code, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a voucher (asynchronously)
     * Delete a single voucher. Vouchers with at least one confirmed redemption can not be deleted.
     * @param code Voucher code (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Voucher was successfully deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVoucherAsync(String code, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteVoucherValidateBeforeCall(code, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for expireVouchers
     * @param inlineObject4  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Status was successfully changed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expireVouchersCall(InlineObject4 inlineObject4, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject4;

        // create path and map variables
        String localVarPath = "/campaigns/vouchers/expire";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call expireVouchersValidateBeforeCall(InlineObject4 inlineObject4, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = expireVouchersCall(inlineObject4, _callback);
        return localVarCall;

    }

    /**
     * Expire a list of vouchers
     * Given a list of voucher codes, change their status to expired, unless they have been redeemed.
     * @param inlineObject4  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Status was successfully changed </td><td>  -  </td></tr>
     </table>
     */
    public void expireVouchers(InlineObject4 inlineObject4) throws ApiException {
        expireVouchersWithHttpInfo(inlineObject4);
    }

    /**
     * Expire a list of vouchers
     * Given a list of voucher codes, change their status to expired, unless they have been redeemed.
     * @param inlineObject4  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Status was successfully changed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> expireVouchersWithHttpInfo(InlineObject4 inlineObject4) throws ApiException {
        okhttp3.Call localVarCall = expireVouchersValidateBeforeCall(inlineObject4, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Expire a list of vouchers (asynchronously)
     * Given a list of voucher codes, change their status to expired, unless they have been redeemed.
     * @param inlineObject4  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Status was successfully changed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expireVouchersAsync(InlineObject4 inlineObject4, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = expireVouchersValidateBeforeCall(inlineObject4, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for findVoucher
     * @param medium  (optional)
     * @param purpose  (optional)
     * @param team  (optional)
     * @param channel  (optional)
     * @param customerIdentifier \&quot;Assign found voucher to a customer with this identifier. Will create customer if not present. Optional.\&quot; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Found voucher </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No vouchers found for given criteria </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findVoucherCall(List<String> medium, List<String> purpose, List<String> team, List<String> channel, String customerIdentifier, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vouchers/find";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (medium != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "medium", medium));
        }

        if (purpose != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "purpose", purpose));
        }

        if (team != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "team", team));
        }

        if (channel != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "channel", channel));
        }

        if (customerIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customer_identifier", customerIdentifier));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findVoucherValidateBeforeCall(List<String> medium, List<String> purpose, List<String> team, List<String> channel, String customerIdentifier, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = findVoucherCall(medium, purpose, team, channel, customerIdentifier, _callback);
        return localVarCall;

    }

    /**
     * Find a voucher by campaign metadata
     * &lt;p&gt;Find voucher by campaign metadata.&lt;/p&gt; &lt;p&gt;   Optionally assign found voucher to a customer by passing customer_identifier param.   All vouchers for a customer can be fetched at &lt;a href&#x3D;\&quot;#get_customers-identifier-vouchers\&quot;&gt;/customers/{id}/vouchers&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;If no voucher is available this endpoint will return an empty response and HTTP code &lt;code&gt;204 No content&lt;/code&gt;&lt;/p&gt; &lt;p&gt;At least one metadata must be provided, otherwise no voucher will be returned.&lt;/p&gt; 
     * @param medium  (optional)
     * @param purpose  (optional)
     * @param team  (optional)
     * @param channel  (optional)
     * @param customerIdentifier \&quot;Assign found voucher to a customer with this identifier. Will create customer if not present. Optional.\&quot; (optional)
     * @return Voucher
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Found voucher </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No vouchers found for given criteria </td><td>  -  </td></tr>
     </table>
     */
    public Voucher findVoucher(List<String> medium, List<String> purpose, List<String> team, List<String> channel, String customerIdentifier) throws ApiException {
        ApiResponse<Voucher> localVarResp = findVoucherWithHttpInfo(medium, purpose, team, channel, customerIdentifier);
        return localVarResp.getData();
    }

    /**
     * Find a voucher by campaign metadata
     * &lt;p&gt;Find voucher by campaign metadata.&lt;/p&gt; &lt;p&gt;   Optionally assign found voucher to a customer by passing customer_identifier param.   All vouchers for a customer can be fetched at &lt;a href&#x3D;\&quot;#get_customers-identifier-vouchers\&quot;&gt;/customers/{id}/vouchers&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;If no voucher is available this endpoint will return an empty response and HTTP code &lt;code&gt;204 No content&lt;/code&gt;&lt;/p&gt; &lt;p&gt;At least one metadata must be provided, otherwise no voucher will be returned.&lt;/p&gt; 
     * @param medium  (optional)
     * @param purpose  (optional)
     * @param team  (optional)
     * @param channel  (optional)
     * @param customerIdentifier \&quot;Assign found voucher to a customer with this identifier. Will create customer if not present. Optional.\&quot; (optional)
     * @return ApiResponse&lt;Voucher&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Found voucher </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No vouchers found for given criteria </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Voucher> findVoucherWithHttpInfo(List<String> medium, List<String> purpose, List<String> team, List<String> channel, String customerIdentifier) throws ApiException {
        okhttp3.Call localVarCall = findVoucherValidateBeforeCall(medium, purpose, team, channel, customerIdentifier, null);
        Type localVarReturnType = new TypeToken<Voucher>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find a voucher by campaign metadata (asynchronously)
     * &lt;p&gt;Find voucher by campaign metadata.&lt;/p&gt; &lt;p&gt;   Optionally assign found voucher to a customer by passing customer_identifier param.   All vouchers for a customer can be fetched at &lt;a href&#x3D;\&quot;#get_customers-identifier-vouchers\&quot;&gt;/customers/{id}/vouchers&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;If no voucher is available this endpoint will return an empty response and HTTP code &lt;code&gt;204 No content&lt;/code&gt;&lt;/p&gt; &lt;p&gt;At least one metadata must be provided, otherwise no voucher will be returned.&lt;/p&gt; 
     * @param medium  (optional)
     * @param purpose  (optional)
     * @param team  (optional)
     * @param channel  (optional)
     * @param customerIdentifier \&quot;Assign found voucher to a customer with this identifier. Will create customer if not present. Optional.\&quot; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Found voucher </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No vouchers found for given criteria </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findVoucherAsync(List<String> medium, List<String> purpose, List<String> team, List<String> channel, String customerIdentifier, final ApiCallback<Voucher> _callback) throws ApiException {

        okhttp3.Call localVarCall = findVoucherValidateBeforeCall(medium, purpose, team, channel, customerIdentifier, _callback);
        Type localVarReturnType = new TypeToken<Voucher>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVoucher
     * @param code Voucher code (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collection of vouchers for campaign </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVoucherCall(String code, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vouchers/{code}"
            .replaceAll("\\{" + "code" + "\\}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVoucherValidateBeforeCall(String code, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getVoucher(Async)");
        }
        

        okhttp3.Call localVarCall = getVoucherCall(code, _callback);
        return localVarCall;

    }

    /**
     * Get a voucher
     * 
     * @param code Voucher code (required)
     * @return Voucher
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collection of vouchers for campaign </td><td>  -  </td></tr>
     </table>
     */
    public Voucher getVoucher(String code) throws ApiException {
        ApiResponse<Voucher> localVarResp = getVoucherWithHttpInfo(code);
        return localVarResp.getData();
    }

    /**
     * Get a voucher
     * 
     * @param code Voucher code (required)
     * @return ApiResponse&lt;Voucher&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collection of vouchers for campaign </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Voucher> getVoucherWithHttpInfo(String code) throws ApiException {
        okhttp3.Call localVarCall = getVoucherValidateBeforeCall(code, null);
        Type localVarReturnType = new TypeToken<Voucher>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a voucher (asynchronously)
     * 
     * @param code Voucher code (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collection of vouchers for campaign </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVoucherAsync(String code, final ApiCallback<Voucher> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVoucherValidateBeforeCall(code, _callback);
        Type localVarReturnType = new TypeToken<Voucher>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVouchers
     * @param campaignId Campaign ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collection of vouchers for campaign </td><td>  * Link - Provides urls for traversing paginated responses. See docs.vouchery.io for details. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getVouchersCall(Integer campaignId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/campaigns/{campaign_id}/vouchers"
            .replaceAll("\\{" + "campaign_id" + "\\}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVouchersValidateBeforeCall(Integer campaignId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling getVouchers(Async)");
        }
        

        okhttp3.Call localVarCall = getVouchersCall(campaignId, _callback);
        return localVarCall;

    }

    /**
     * Get all vouchers for a campaign
     * 
     * @param campaignId Campaign ID (required)
     * @return List&lt;Voucher&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collection of vouchers for campaign </td><td>  * Link - Provides urls for traversing paginated responses. See docs.vouchery.io for details. <br>  </td></tr>
     </table>
     */
    public List<Voucher> getVouchers(Integer campaignId) throws ApiException {
        ApiResponse<List<Voucher>> localVarResp = getVouchersWithHttpInfo(campaignId);
        return localVarResp.getData();
    }

    /**
     * Get all vouchers for a campaign
     * 
     * @param campaignId Campaign ID (required)
     * @return ApiResponse&lt;List&lt;Voucher&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collection of vouchers for campaign </td><td>  * Link - Provides urls for traversing paginated responses. See docs.vouchery.io for details. <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<Voucher>> getVouchersWithHttpInfo(Integer campaignId) throws ApiException {
        okhttp3.Call localVarCall = getVouchersValidateBeforeCall(campaignId, null);
        Type localVarReturnType = new TypeToken<List<Voucher>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all vouchers for a campaign (asynchronously)
     * 
     * @param campaignId Campaign ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collection of vouchers for campaign </td><td>  * Link - Provides urls for traversing paginated responses. See docs.vouchery.io for details. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getVouchersAsync(Integer campaignId, final ApiCallback<List<Voucher>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVouchersValidateBeforeCall(campaignId, _callback);
        Type localVarReturnType = new TypeToken<List<Voucher>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for importVouchers
     * @param id Campaign ID (required)
     * @param file  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Import summary </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importVouchersCall(Integer id, File file, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/campaigns/{id}/vouchers/import"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (file != null) {
            localVarFormParams.put("file", file);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importVouchersValidateBeforeCall(Integer id, File file, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling importVouchers(Async)");
        }
        

        okhttp3.Call localVarCall = importVouchersCall(id, file, _callback);
        return localVarCall;

    }

    /**
     * Import your own vouchers
     * 
     * @param id Campaign ID (required)
     * @param file  (optional)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Import summary </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse200 importVouchers(Integer id, File file) throws ApiException {
        ApiResponse<InlineResponse200> localVarResp = importVouchersWithHttpInfo(id, file);
        return localVarResp.getData();
    }

    /**
     * Import your own vouchers
     * 
     * @param id Campaign ID (required)
     * @param file  (optional)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Import summary </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse200> importVouchersWithHttpInfo(Integer id, File file) throws ApiException {
        okhttp3.Call localVarCall = importVouchersValidateBeforeCall(id, file, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Import your own vouchers (asynchronously)
     * 
     * @param id Campaign ID (required)
     * @param file  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Import summary </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importVouchersAsync(Integer id, File file, final ApiCallback<InlineResponse200> _callback) throws ApiException {

        okhttp3.Call localVarCall = importVouchersValidateBeforeCall(id, file, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateVoucher
     * @param code Voucher code (required)
     * @param voucher  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated voucher </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateVoucherCall(String code, Voucher voucher, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = voucher;

        // create path and map variables
        String localVarPath = "/vouchers/{code}"
            .replaceAll("\\{" + "code" + "\\}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateVoucherValidateBeforeCall(String code, Voucher voucher, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling updateVoucher(Async)");
        }
        

        okhttp3.Call localVarCall = updateVoucherCall(code, voucher, _callback);
        return localVarCall;

    }

    /**
     * Update a voucher
     * Only voucher status can be updated.
     * @param code Voucher code (required)
     * @param voucher  (optional)
     * @return Voucher
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated voucher </td><td>  -  </td></tr>
     </table>
     */
    public Voucher updateVoucher(String code, Voucher voucher) throws ApiException {
        ApiResponse<Voucher> localVarResp = updateVoucherWithHttpInfo(code, voucher);
        return localVarResp.getData();
    }

    /**
     * Update a voucher
     * Only voucher status can be updated.
     * @param code Voucher code (required)
     * @param voucher  (optional)
     * @return ApiResponse&lt;Voucher&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated voucher </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Voucher> updateVoucherWithHttpInfo(String code, Voucher voucher) throws ApiException {
        okhttp3.Call localVarCall = updateVoucherValidateBeforeCall(code, voucher, null);
        Type localVarReturnType = new TypeToken<Voucher>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a voucher (asynchronously)
     * Only voucher status can be updated.
     * @param code Voucher code (required)
     * @param voucher  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated voucher </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateVoucherAsync(String code, Voucher voucher, final ApiCallback<Voucher> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateVoucherValidateBeforeCall(code, voucher, _callback);
        Type localVarReturnType = new TypeToken<Voucher>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
