/*
 * Vouchery API Reference
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Contact: hello@vouchery.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.vouchery.sdk;

import io.vouchery.sdk.ApiCallback;
import io.vouchery.sdk.ApiClient;
import io.vouchery.sdk.ApiException;
import io.vouchery.sdk.ApiResponse;
import io.vouchery.sdk.Configuration;
import io.vouchery.sdk.Pair;
import io.vouchery.sdk.ProgressRequestBody;
import io.vouchery.sdk.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Redemption;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RedemptionsApi {
    private ApiClient localVarApiClient;

    public RedemptionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RedemptionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for confirmRedemption
     * @param code Voucher code (required)
     * @param transactionId ID which identifies the transaction in customer system, e.g. order number, invoice number (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A redemption </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call confirmRedemptionCall(String code, String transactionId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vouchers/{code}/redemptions"
            .replaceAll("\\{" + "code" + "\\}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (transactionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transaction_id", transactionId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call confirmRedemptionValidateBeforeCall(String code, String transactionId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling confirmRedemption(Async)");
        }
        
        // verify the required parameter 'transactionId' is set
        if (transactionId == null) {
            throw new ApiException("Missing the required parameter 'transactionId' when calling confirmRedemption(Async)");
        }
        

        okhttp3.Call localVarCall = confirmRedemptionCall(code, transactionId, _callback);
        return localVarCall;

    }

    /**
     * Confirm a redemption
     * 
     * @param code Voucher code (required)
     * @param transactionId ID which identifies the transaction in customer system, e.g. order number, invoice number (required)
     * @return Redemption
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A redemption </td><td>  -  </td></tr>
     </table>
     */
    public Redemption confirmRedemption(String code, String transactionId) throws ApiException {
        ApiResponse<Redemption> localVarResp = confirmRedemptionWithHttpInfo(code, transactionId);
        return localVarResp.getData();
    }

    /**
     * Confirm a redemption
     * 
     * @param code Voucher code (required)
     * @param transactionId ID which identifies the transaction in customer system, e.g. order number, invoice number (required)
     * @return ApiResponse&lt;Redemption&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A redemption </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Redemption> confirmRedemptionWithHttpInfo(String code, String transactionId) throws ApiException {
        okhttp3.Call localVarCall = confirmRedemptionValidateBeforeCall(code, transactionId, null);
        Type localVarReturnType = new TypeToken<Redemption>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Confirm a redemption (asynchronously)
     * 
     * @param code Voucher code (required)
     * @param transactionId ID which identifies the transaction in customer system, e.g. order number, invoice number (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A redemption </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call confirmRedemptionAsync(String code, String transactionId, final ApiCallback<Redemption> _callback) throws ApiException {

        okhttp3.Call localVarCall = confirmRedemptionValidateBeforeCall(code, transactionId, _callback);
        Type localVarReturnType = new TypeToken<Redemption>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createRedemption
     * @param code Voucher code (required)
     * @param redemption  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A redemption </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRedemptionCall(String code, Redemption redemption, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = redemption;

        // create path and map variables
        String localVarPath = "/vouchers/{code}/redemptions"
            .replaceAll("\\{" + "code" + "\\}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRedemptionValidateBeforeCall(String code, Redemption redemption, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling createRedemption(Async)");
        }
        

        okhttp3.Call localVarCall = createRedemptionCall(code, redemption, _callback);
        return localVarCall;

    }

    /**
     * Create a redemption
     * 
     * @param code Voucher code (required)
     * @param redemption  (optional)
     * @return Redemption
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A redemption </td><td>  -  </td></tr>
     </table>
     */
    public Redemption createRedemption(String code, Redemption redemption) throws ApiException {
        ApiResponse<Redemption> localVarResp = createRedemptionWithHttpInfo(code, redemption);
        return localVarResp.getData();
    }

    /**
     * Create a redemption
     * 
     * @param code Voucher code (required)
     * @param redemption  (optional)
     * @return ApiResponse&lt;Redemption&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A redemption </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Redemption> createRedemptionWithHttpInfo(String code, Redemption redemption) throws ApiException {
        okhttp3.Call localVarCall = createRedemptionValidateBeforeCall(code, redemption, null);
        Type localVarReturnType = new TypeToken<Redemption>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a redemption (asynchronously)
     * 
     * @param code Voucher code (required)
     * @param redemption  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A redemption </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRedemptionAsync(String code, Redemption redemption, final ApiCallback<Redemption> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRedemptionValidateBeforeCall(code, redemption, _callback);
        Type localVarReturnType = new TypeToken<Redemption>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteRedemption
     * @param code Voucher code (required)
     * @param transactionId ID which identifies the transaction in customer system, e.g. order number, invoice number (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Redemption was successfully deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRedemptionCall(String code, String transactionId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vouchers/{code}/redemptions"
            .replaceAll("\\{" + "code" + "\\}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (transactionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transaction_id", transactionId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRedemptionValidateBeforeCall(String code, String transactionId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling deleteRedemption(Async)");
        }
        
        // verify the required parameter 'transactionId' is set
        if (transactionId == null) {
            throw new ApiException("Missing the required parameter 'transactionId' when calling deleteRedemption(Async)");
        }
        

        okhttp3.Call localVarCall = deleteRedemptionCall(code, transactionId, _callback);
        return localVarCall;

    }

    /**
     * Delete a redemption
     * 
     * @param code Voucher code (required)
     * @param transactionId ID which identifies the transaction in customer system, e.g. order number, invoice number (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Redemption was successfully deleted </td><td>  -  </td></tr>
     </table>
     */
    public void deleteRedemption(String code, String transactionId) throws ApiException {
        deleteRedemptionWithHttpInfo(code, transactionId);
    }

    /**
     * Delete a redemption
     * 
     * @param code Voucher code (required)
     * @param transactionId ID which identifies the transaction in customer system, e.g. order number, invoice number (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Redemption was successfully deleted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteRedemptionWithHttpInfo(String code, String transactionId) throws ApiException {
        okhttp3.Call localVarCall = deleteRedemptionValidateBeforeCall(code, transactionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a redemption (asynchronously)
     * 
     * @param code Voucher code (required)
     * @param transactionId ID which identifies the transaction in customer system, e.g. order number, invoice number (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Redemption was successfully deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRedemptionAsync(String code, String transactionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRedemptionValidateBeforeCall(code, transactionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRedemption
     * @param code Voucher code (required)
     * @param transactionId ID which identifies the transaction in customer system, e.g. order number, invoice number (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A redemption </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRedemptionCall(String code, String transactionId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vouchers/{code}/redemptions"
            .replaceAll("\\{" + "code" + "\\}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (transactionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transaction_id", transactionId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRedemptionValidateBeforeCall(String code, String transactionId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getRedemption(Async)");
        }
        
        // verify the required parameter 'transactionId' is set
        if (transactionId == null) {
            throw new ApiException("Missing the required parameter 'transactionId' when calling getRedemption(Async)");
        }
        

        okhttp3.Call localVarCall = getRedemptionCall(code, transactionId, _callback);
        return localVarCall;

    }

    /**
     * Get a redemption
     * 
     * @param code Voucher code (required)
     * @param transactionId ID which identifies the transaction in customer system, e.g. order number, invoice number (required)
     * @return Redemption
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A redemption </td><td>  -  </td></tr>
     </table>
     */
    public Redemption getRedemption(String code, String transactionId) throws ApiException {
        ApiResponse<Redemption> localVarResp = getRedemptionWithHttpInfo(code, transactionId);
        return localVarResp.getData();
    }

    /**
     * Get a redemption
     * 
     * @param code Voucher code (required)
     * @param transactionId ID which identifies the transaction in customer system, e.g. order number, invoice number (required)
     * @return ApiResponse&lt;Redemption&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A redemption </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Redemption> getRedemptionWithHttpInfo(String code, String transactionId) throws ApiException {
        okhttp3.Call localVarCall = getRedemptionValidateBeforeCall(code, transactionId, null);
        Type localVarReturnType = new TypeToken<Redemption>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a redemption (asynchronously)
     * 
     * @param code Voucher code (required)
     * @param transactionId ID which identifies the transaction in customer system, e.g. order number, invoice number (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A redemption </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRedemptionAsync(String code, String transactionId, final ApiCallback<Redemption> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRedemptionValidateBeforeCall(code, transactionId, _callback);
        Type localVarReturnType = new TypeToken<Redemption>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRedemptions
     * @param campaignId Campaign ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collection of redemptions for campaign </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRedemptionsCall(Integer campaignId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/campaigns/{campaign_id}/redemptions"
            .replaceAll("\\{" + "campaign_id" + "\\}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRedemptionsValidateBeforeCall(Integer campaignId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling getRedemptions(Async)");
        }
        

        okhttp3.Call localVarCall = getRedemptionsCall(campaignId, _callback);
        return localVarCall;

    }

    /**
     * Get all redemptions for a campaign
     * 
     * @param campaignId Campaign ID (required)
     * @return List&lt;Redemption&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collection of redemptions for campaign </td><td>  -  </td></tr>
     </table>
     */
    public List<Redemption> getRedemptions(Integer campaignId) throws ApiException {
        ApiResponse<List<Redemption>> localVarResp = getRedemptionsWithHttpInfo(campaignId);
        return localVarResp.getData();
    }

    /**
     * Get all redemptions for a campaign
     * 
     * @param campaignId Campaign ID (required)
     * @return ApiResponse&lt;List&lt;Redemption&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collection of redemptions for campaign </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Redemption>> getRedemptionsWithHttpInfo(Integer campaignId) throws ApiException {
        okhttp3.Call localVarCall = getRedemptionsValidateBeforeCall(campaignId, null);
        Type localVarReturnType = new TypeToken<List<Redemption>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all redemptions for a campaign (asynchronously)
     * 
     * @param campaignId Campaign ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Collection of redemptions for campaign </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRedemptionsAsync(Integer campaignId, final ApiCallback<List<Redemption>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRedemptionsValidateBeforeCall(campaignId, _callback);
        Type localVarReturnType = new TypeToken<List<Redemption>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
